@page "/admin/uploadmltags"
@attribute [Authorize(Roles = "Administrator")]
@using System.Linq
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<UploadMLTags> Logger

<h1>Upload Files</h1>

<p>
    <MudText>
        Upload up to @maxAllowedFiles files:
        <InputFile OnChange="@OnInputFileChange" multiple />
    </MudText>
</p>

@if (files.Count > 0)
{
    <MudCard>
        <MudCardContent>
            <MudList>
                @foreach (var file in files)
                {
                    <MudListItem>
                        @if (FileUpload(uploadResults, file.Name, Logger,
                       out var result))
                        {
                            <MudText>Stored File Name: @result.StoredFileName  Tags Uploaded: @result.NumberTagsUploaded</MudText>
                        }
                        else
                        {
                            <span>
                                <MudText>
                                    There was an error uploading the file (Error: @result.ErrorCode).
                                </MudText>
                            </span>
                        }
                    </MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>
}

@code {
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 5;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;

        using var content = new MultipartFormDataContent();

        files = new();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(f => f.FileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() { Name = file.Name });

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}",
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync(ApiEndpoints.UploadMlTags, content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<UploadResult>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }

        shouldRender = true;
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string? fileName, ILogger<UploadMLTags> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.StoredFileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }
}