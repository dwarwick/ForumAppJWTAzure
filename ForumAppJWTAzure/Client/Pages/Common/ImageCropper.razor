@page "/imageCropper"

<div class="form-group">
    <div class="custom-file">
        <input id="upload" accept="image/*" type="file" class="custom-file-input" style="display:none;" @onchange="Upload">
    </div>
</div>

<div class="upload-demo">
    <div class="upload-demo-wrap">
        <div id="upload-demo"></div>
    </div>
</div>

@if (ShowCropButton)
{
    <MudIconButton OnClick="Up" Icon="@Icons.Material.Outlined.Save" />
}

<div id="result"></div>
<img id="result-img" src=""/>


@code {
    ApplicationUserViewModel? applicationUserViewModel { get; set; }
    [Parameter] public EventCallback<bool> updatedImage { get; set; }
    string FileName = "ImageCropper";

    private bool ShowCropButton;
    string model { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (await _authService.IsIauthenticated() && applicationUserViewModel == null)
        {
            Response<ApplicationUserViewModel>? response = await _authService.GetLoggedInUser();

            if (response?.Success ?? false) applicationUserViewModel = response.Data;
        }
    }

    async Task Upload()
    {
        await _jsRuntime.InvokeVoidAsync("Crop.image", DotNetObjectReference.Create(this));
        ShowCropButton = true;
    }

    async Task Up()
    {
        await _jsRuntime.InvokeVoidAsync("Crop.responses", DotNetObjectReference.Create(this));
        ShowCropButton = false;
    }

    [JSInvokable]
    public async void ResponseMethod(string data)
    {
        model = data;
        await UploadServer(data);
        StateHasChanged();
    }

    async Task UploadServer(string data)
    {
        if (applicationUserViewModel != null)
        {
            string filename = "";
            StorageViewModel storageModel = new()
            {
                    Base64 = data,                    
                    ContainerName = _configurationService.Configuration["BlobStorage:profile-pic-container"],
                    Guid = Guid.NewGuid().ToString()
            };

            AppLogViewModel appLog = new()
            {
                FileName = FileName,
                Method = "UploadServer",
                Project = Lookups.Project.Client,                    
                Message = $"Uploading Image {storageModel.Guid}",
                Severity = Lookups.Severity.Info,
            };

            var logResponse = await _appLogService.Create<AppLogViewModel>(appLog, ApiEndpoints.AppLog);            

            var response = await _storageService.UploadAsync3(storageModel);

            if(response.Success)
            {
                filename = response?.Data?.Uri ?? "";
                _snackbar.Add("Successfully uploaded profile picture", Severity.Success);

                appLog = new()
                {
                    FileName = FileName,
                    Method = "UploadServer",
                    Project = Lookups.Project.Client,
                    Message = $"Successfully uploaded Image {storageModel.Guid}",
                        Severity = Lookups.Severity.Info,
                };

                logResponse = await _appLogService.Create<AppLogViewModel>(appLog, ApiEndpoints.AppLog);
            }
            else
            {
                _snackbar.Add("Problem uploading profile picture", Severity.Error);

                appLog = new()
                {
                    FileName = FileName,
                    Method = "UploadServer",
                    Project = Lookups.Project.Client,
                    Message = $"Problem uploading Image {storageModel.Guid}",
                    Severity = Lookups.Severity.Error,
                };

                logResponse = await _appLogService.Create<AppLogViewModel>(appLog, ApiEndpoints.AppLog);
            }

            if (!string.IsNullOrEmpty(filename))
            {
                applicationUserViewModel.ProfilePicture = filename;
                await _authService.UpdateUserAsync(applicationUserViewModel);
                await updatedImage.InvokeAsync(true);
            }
        }
    }
}