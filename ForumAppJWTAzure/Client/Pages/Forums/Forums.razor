<Spinner IsLoading="IsLoading">
    @if (forums == null || forums.Count == 0)
    {
        <MudText Typo="Typo.h3">No forums available</MudText>
    }
    else
    {
        <MudTable @ref="_table" Items="@forums" RowsPerPage="5" Hover="true" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.None">
            <HeaderContent>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><ForumListItem forum="@context" /></MudTd>
            </RowTemplate>
            <PagerContent>
                @if(_table != null)
                {
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" ShowFirstButton="true" ShowLastButton="true" ShowNextButton="true" ShowPreviousButton="true" />
                    <MudTablePager PageSizeOptions="Lookups.MudPagination.PageSizeOptions" InfoFormat="@($"{Lookups.MudPagination.InfoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" HidePagination="true" />
                }                
            </PagerContent>
        </MudTable>
    }
</Spinner>

@code {
    [CascadingParameter] protected Task<AuthenticationState>? AuthStat { get; set; }
    [Parameter] public string Target { get; set; } = string.Empty;

    ApplicationUserViewModel? applicationUserViewModel;
    private MudTable<ForumViewModel>? _table;
    public List<ForumViewModel>? forums { get; set; }

    [Parameter] public List<ForumViewModel>? searchForums { get; set; }

    private bool IsLoading;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        Response<List<ForumViewModel>> response = new();

        if (searchForums != null)
        {
            forums = new();
            forums.AddRange(searchForums);
        }
        else
        {
            if (!string.IsNullOrEmpty(Target))
            {
                string target = Target.Split('&')[0];

                string strNotification = Target.Split('&')[1];

                int notificationId = int.Parse(strNotification.Split('=')[1]);

                Response<ForumViewModel> forumResponse = await _forumService.GetForum(int.Parse(target.Split('=')[1]));

                if(forumResponse.Success)
                {
                    forums = new();
                    forums.Add(forumResponse?.Data ?? new ForumViewModel());

                    NotificationViewModel notificationViewModel = new();
                    Response<NotificationViewModel> notificationResponse = await _notificationService.GetSingle<NotificationViewModel>(ApiEndpoints.GetNotification(notificationId));
                    if(notificationResponse.Success && notificationResponse.Data != null)
                    {
                        notificationViewModel = notificationResponse.Data;

                        notificationViewModel.Read = true;

                        bool success = await _notificationService.Put<NotificationViewModel>(notificationViewModel, ApiEndpoints.Notifications);


                    }

                    

                }
            }
            else
            {
                response = await _forumService.GetAllForums();
            }

            

            if (response.Success) forums = response.Data;
        }

        ClaimsPrincipal? user = null;
        if (AuthStat != null) user = (await AuthStat).User;

        if (user?.Identity?.IsAuthenticated ?? false)
        {
            var userResponse = await _authService.GetLoggedInUser();

            if (userResponse.Success)
            {
                applicationUserViewModel = userResponse.Data;
            }
        }

        

        IsLoading = false;
    }
    private void PageChanged(int i)
    {
        if(_table != null)
        {
            _table.NavigateTo(i - 1);
        }        
    }
}