@page "/forum"
@attribute [Authorize]

<Spinner IsLoading=@(tagArray == null)>
    <MudCard>
        <EditForm Model="@forum" OnValidSubmit="@SubmitOnClickAsync">
            <FluentValidationValidator @ref="Validator" Options="@(options => options.IncludeAllRuleSets())" />

            <MudCardHeader><MudText Typo="Typo.h3">Create New Forum Post</MudText></MudCardHeader>
            <MudCardContent>
                <ValidationSummary style="color:#f64e62ff;" />

                <MudTextField Class="mb-2" @bind-Value="forum.Title" For="@(() => forum.Title)" Immediate="true" Label="Forum Title" />

                @* Configured in tinyMceConf.js *@
                <Editor ScriptSrc="lib/tinymce/tinymce.min.js" JsConfSrc="tinyMceConf" @bind-Value="forum.PostText" Field="() => forum.PostText" ValidateOnInput="@true" />

                <MudAutocomplete T="string" Label="Tags" Value="selectedTagString" SearchFunc="@Search1" MaxItems="100" MinCharacters="2" ResetValueOnEmptyText="true" ValueChanged="@(e => SelectedTagString(e))" CoerceText="true" CoerceValue="true">
                    <MoreItemsTemplate>
                        <MudText Align="Align.Center" Class="px-4 py-1">
                            Minimum 2 characters initiate a search of this list. Only the first 100 items are shown
                        </MudText>
                    </MoreItemsTemplate>
                </MudAutocomplete>

                <MudPaper Class="mt-2 p-4" Elevation="5">
                    @if (forum.Tags != null)
                    {
                        <MudStack Row="true">
                            @foreach (TagViewModel selectedTag in forum.Tags)
                            {
                                @if( SuggestedTags.Select(x => x.Name).ToList().Contains(selectedTag.Name))
                                {
                                    <MudChip Text="@selectedTag.Name" Color="@(colors[SuggestedTags.IndexOf(selectedTag)])"></MudChip>
                                }
                                else
                                {
                                    <MudChip Text="@selectedTag.Name" Color="Color.Primary" OnClose="(() => SelectedTagRemoved(selectedTag.Name))"></MudChip>
                                }
                                
                            }
                        </MudStack>
                    }
                </MudPaper>

                @if (ShowingSuggestedTags)
                {
                    <MudCard Class="my-3 p-2">
                        <MudText Class="my-2" Align="Align.Center" Typo="Typo.subtitle1">Suggested Tags</MudText>
                        <MudChipSet @bind-SelectedChips="selectedTags" @bind-SelectedChips:after="SelectedChipsChanged" MultiSelection="true" Filter="true">
                            @foreach (TagViewModel suggestedTag in SuggestedTags)
                            {                                
                                <MudChip Text="@suggestedTag.Name" Color="@(colors[SuggestedTags.IndexOf(suggestedTag)])" Variant="Variant.Filled"/>
                            }
                        </MudChipSet>
                    </MudCard>
                }

            </MudCardContent>



            <MudCardActions>
                @if(ShowingSuggestedTags)
                {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Class="me-2">Submit</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Class="me-2" OnClick="ShowSuggestedTags">Show Suggested Tags</MudButton>
                }
                <MudButton OnClick="CancelOnClick" Variant="Variant.Outlined">Cancel</MudButton>
            </MudCardActions>

        </EditForm>
    </MudCard>
</Spinner>




@code {
    private FluentValidationValidator? Validator;
    List<string>? errors;
    ForumViewModel forum { get; set; } = new();
    List<PostViewModel> posts = new List<PostViewModel>();
    List<TagViewModel>? allTags;
    List<TagViewModel> SuggestedTags = new List<TagViewModel>();
    string[]? tagArray;
    MudChip[] selectedTags;
    string? selectedTagString;

    List<MudBlazor.Color> colors = new() { Color.Error, Color.Secondary, Color.Info, Color.Success, Color.Warning };

    private bool ShowingSuggestedTags;

    protected override async Task OnInitializedAsync()
    {
        var response = await _authService.GetLoggedInUser();
        DateTime dateTime = DateTime.UtcNow;

        if ((response?.Success ?? false) && response.Data != null)
        {
            posts = new List<PostViewModel>();

            PostViewModel post = new PostViewModel
            {

            };

            forum = new()
                {
                    CreatedBy = response.Data,
                    CreatedById = response.Data.Id,
                    CreatedDate = dateTime,
                    ModifiedDate = dateTime
                };
        }
        else
        {
            _navManager.NavigateTo("/forumlist");
        }

        Response<List<TagViewModel>> tagResponse = await _tagService.Get<TagViewModel>(ApiEndpoints.GetAllTags);

        if (tagResponse.Success && tagResponse.Data != null)
        {
            allTags = tagResponse.Data;


            if (allTags.Count > 0) tagArray = allTags.Select(x => x.Name ?? "").Order().ToArray();
        }
    }


    async Task SubmitOnClickAsync()
    {
        if (await Validator!.ValidateAsync())
        {
            errors = new();

            var response = await _forumService.CreateNewForum(forum);

            if (!response.Success)
            {
                errors.Add("Unable to create new forum");
            }
            else
            {
                var searchResponse = await _searchService.Create(response.Data, ApiEndpoints.Search);
            }
        }

        _navManager.NavigateTo("/forumlist");
    }

    private async Task ShowSuggestedTags()
    {
        if(string.IsNullOrEmpty(forum.Title) || string.IsNullOrEmpty(forum.PostText) || forum.Title.Length < 5 || forum.PostText.Length < 20)
        {
            _snackbar.Add("Please create a substantial forum post before trying to get suggested tags. Title must be at least 5 characters and post must be at least 20 characters in length.", Severity.Error);
            return;
        }

        posts.Add(new PostViewModel()
        {
            CreatedBy = forum.CreatedBy,
            CreatedById = forum.CreatedById,
            CreatedDate = forum.CreatedDate,
            ModifiedDate = forum.ModifiedDate,
            Text = forum.PostText
        });

        forum.Posts = posts;

        Response<List<TagViewModel>> response = await _tagService.GetSuggestedTags(forum);

        if (response.Success && response.Data?.Count > 0)
        {
            SuggestedTags = response.Data;
            ShowingSuggestedTags = true;
        }

    }

    void CancelOnClick()
    {
        forum = new();
        //errors = new();
        //await OnForumCreated.InvokeAsync();
    }



    private void SelectedTagRemoved(string? tagText)
    {
        if (allTags == null || forum.Tags == null || tagText == null) return;

        TagViewModel? tagViewModel = allTags.FirstOrDefault(x => x.Name == tagText);

        if (tagViewModel != null && tagArray != null)
        {
            tagArray.Append(tagViewModel.Name);
            forum.Tags.Remove(tagViewModel);

            MudChip chip = selectedTags?.FirstOrDefault(x => x.Text == tagText) ?? new();

            //selectedTags[selectedTags.ToList().IndexOf(chip)]. = false;

            selectedTags.ToList().Remove(chip);

            SelectedChipsChanged();

            StateHasChanged();
        }
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        if (tagArray?.Length == 0) return new string[] { };

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return tagArray ?? new string[] { };

        return tagArray?.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)) ?? new string[] { };
    }

    private void SelectedTagString(string value)
    {
        selectedTagString = value;

        if (selectedTagString == null || selectedTagString == "" || allTags == null || forum.Tags == null) return;

        TagViewModel? tagViewModel = allTags?.FirstOrDefault(x => x.Name!.Equals(value, StringComparison.OrdinalIgnoreCase));



        if (tagViewModel != null)
        {
            tagArray = tagArray?.Where(x => !x.Equals(value, StringComparison.OrdinalIgnoreCase)).ToArray();
            forum.Tags.Add(tagViewModel);
        }

        if (tagArray?.Length == 0) selectedTagString = "";

        StateHasChanged();
    }

    private void SelectedChipsChanged()
    {
        List<TagViewModel> selected = allTags?.Where(x => selectedTags.Select(s => s.Text).Contains(x.Name)).ToList() ?? new();

        foreach(TagViewModel tag in SuggestedTags)
        {
            if(forum.Tags.Select(x => x.Name).ToList().Contains(tag.Name)) // if the user previously added one of the suggested tags
            {
                if(!selected.Select(x => x.Name).ToList().Contains(tag.Name)) // if the user removed the selected tag
                {
                    forum.Tags.Remove(tag); // remove it from forum.Tags
                }
            }
            else
            { // if forum.tags does not contain the suggested tag

                if(selected.Select(x => x.Name).ToList().Contains(tag.Name)) // if the user wants to add the suggested tag to forum.tags
                {
                    forum.Tags.Add(tag);
                }
            }
        }
    }
}
