<MudCard>
    <MudCardHeader Class="py-0">
        <MudCardContent Class="py-0 w-100">
            <div class="d-flex">
                <div class="d-flex align-items-start">
                    <MudStack>
                        <UserNameComponent displayName="@(post?.CreatedBy?.DisplayName ?? "")" ProfilePicture="@post?.CreatedBy?.ProfilePicture" />
                        @if (post != null)
                        {
                            <div class="mx-1 mt-auto">Post# @PostIndex Created @StringHelper.GetLocalDate(post?.CreatedDate)</div>
                        }
                    </MudStack>
                    @if (post?.CreatedBy?.Id == (ForumCreatedById ?? ""))
                    {
                        <div class="ms-3 mt-auto h-100" style="background-color:#274F80;font-weight:700;max-height:20px;">Forum Author</div>
                    }


                </div>
                @if (Disabled)
                {
                    @if (post != null && post?.CreatedDate != post?.ModifiedDate)
                    {
                        <div class="mt-auto ms-1">
                            <span>Edited @StringHelper.GetLocalDate(post?.ModifiedDate)</span>
                        </div>
                    }

                    <div class="ms-auto">
                        <div class="d-flex justify-space-between h-100">
                            @if (post?.ReplyPost != null)
                            {
                                <div class="d-flex flex-column">
                                    <UserNameComponent displayName="@(post?.ReplyPost?.CreatedBy?.DisplayName ?? "")" ProfilePicture="@post?.ReplyPost?.CreatedBy?.ProfilePicture" />
                                    <div class="mx-1 mt-auto">Replied Post # @ReplyPostNumber</div>
                                </div>
                            }
                            @if (post != null)
                            {
                                <PostVote applicationUserViewModel="applicationUserViewModel" postId="@(post?.Id ?? 0)" votes="@post?.Votes" postCreatedById="@post?.CreatedBy?.Id" />
                            }
                        </div>
                    </div>

                }
                else
                {
                    <div class="ms-auto">Editing</div>
                }


            </div>
        </MudCardContent>
    </MudCardHeader> @* End of card header *@
    <MudCardContent>
        @if (Disabled && !string.IsNullOrEmpty(postText))
        { // read only

            <HTMLRenderer postText="@postText" />
                        
            @if(Images.Count > 0)
            {
                <MudPaper Elevation="5">
                <MudStack Row="true" Spacing="5" Class="p-3">
                    @foreach (LocationViewModel image in Images)
                    {
                        <MudStack @onclick="() => ToggleOpen(image)">
                            <MudImage Alt="@image.Description" Src="@image.Location" ObjectFit="ObjectFit.ScaleDown" Width="75" />
                            <MudText>@image.Description</MudText>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
            }            

            @if ((applicationUserViewModel != null && post?.CreatedBy != null) && (post.CreatedBy.Id == applicationUserViewModel.Id))
            {
                <div class="card-footer">
                    <i class="bi bi-pencil" @onclick="EditPostOnClick" style="cursor:pointer"> Edit</i>
                </div>
            }

            @if (applicationUserViewModel != null && post?.CreatedBy != null && post?.CreatedBy.Id != applicationUserViewModel.Id)
            {
                <div class="card-footer">
                    <i class="bi bi-reply mx-2" @onclick="ReplyPostOnClick" style="cursor:pointer"> Reply</i>
                </div>
            }

        }
        else
        { //editing

            <Editor ScriptSrc="lib/tinymce/tinymce.min.js" JsConfSrc="tinyMceConf" Disable="@Disabled" @bind-Value="@postText" />

            <div class="card-footer">
                <MudStack Row="true">
                    <MudButton StartIcon="@Icons.Material.Filled.Save" @onclick="SavePostOnClickAsync">Save</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Cancel" @onclick="@CancelOnClick">Cancel</MudButton>
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Image"
                                       for="@context">
                                Upload File
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudStack>
            </div>
        }
    </MudCardContent>
</MudCard>

@if (ViewingImages)
{
    <DragableWindow Description="@viewedImage.Description">
        <MudStack @onclick="() => ToggleOpen(viewedImage)">
            <MudImage Alt="@viewedImage.Description" Src="@viewedImage.Location" ObjectFit="ObjectFit.Fill" Fluid="true" Style="max-width:80vw;max-height:80vh;" />            
        </MudStack>
    </DragableWindow>
}




@code {
    ApplicationUserViewModel? applicationUserViewModel { get; set; }
    [Parameter] public PostViewModel? post { get; set; }
    [Parameter] public string? ForumCreatedById { get; set; }
    [Parameter] public EventCallback<PostViewModel> OnReplying { get; set; }
    [Parameter] public int PostIndex { get; set; }
    [Parameter] public Func<int, int>? PostIndexFunc { get; set; }
    [Parameter] public EventCallback<PostViewModel> postChanged { get; set; }

    List<LocationViewModel> Images = new();
    LocationViewModel viewedImage;

    Editor? ReadOnlyEditor;
    int ReplyPostNumber;

    string? postText;
    private string? OriginalText;

    private bool Disabled = true;
    private bool rendered = false;
    private bool ViewingImages;

    protected override async Task OnInitializedAsync()
    {
        var response = await _authService.GetLoggedInUser();

        if (response.Success)
        {
            applicationUserViewModel = response.Data;
        }

        postText = post?.Text ?? "";

        if ((post?.ReplyPost?.Id ?? 0) != 0)
        {
            ReplyPostNumber = PostIndexFunc(post?.ReplyPost?.Id ?? 0);
        }

        if (_signalRService?.HubConnection?.State == HubConnectionState.Connected)
        {
            _signalRService.EditPostViewModel += (s, e) => EditPostViewModel(s, e);

            if (_signalRService.HubConnection != null && post.Id > 0)
            {
                await _signalRService.HubConnection.SendAsync("AddToGroup", $"EditPost{post.Id}");
            }
        }

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            rendered = true;

            if (ReadOnlyEditor != null)
            {
                ReadOnlyEditor.AdditionalAttributes = new Dictionary<string, object>() { { "readonly", true } };
            }
        }
    }

    private void EditPostViewModel(object? sender, string viewModel)
    {
        if (viewModel == null || post?.CreatedById == applicationUserViewModel?.Id) return;

        post = JsonConvert.DeserializeObject<PostViewModel>(viewModel); 
        
        postText = post?.Text ?? "";

        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(post?.Images))
        {
            Images = JsonConvert.DeserializeObject<List<LocationViewModel>>(post.Images);
        }
    }
    void EditPostOnClick()
    {
        Disabled = false;
        OriginalText = postText;

        StateHasChanged();
    }

    async Task ReplyPostOnClick()
    {
        await OnReplying.InvokeAsync(post);
    }

    async Task SavePostOnClickAsync()
    {
        Disabled = true;

        if (OriginalText == postText || post == null) return;

        post.ModifiedDate = DateTime.Now;
        post.Text = postText;

        Response<PostViewModel> response = await _postService.EditPost(post);

        if (response.Success)
        {
            await postChanged.InvokeAsync(response.Data);
        }
    }

    void CancelOnClick()
    {
        Disabled = true;

        StateHasChanged();
    }

    private async Task UploadFile(IBrowserFile file)
    {
        if (file.Size > 500 * 1024)
        {
            _snackbar.Add("File too large. Max file size is 500K.", Severity.Error);
            return;
        }
        if (file != null)
        {
            MemoryStream ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            var bytes = ms.ToArray();

            UploadFileModel model = new()
                {
                    Data = bytes,
                    FileName = file.Name,
                    PostId = post?.Id ?? 0
                };

            Response<LocationViewModel> response = await _postService.UploadImage(model);

            List<LocationViewModel>? storedImages = new();

            if (response.Success)
            {
                if (post?.Images != null)
                {
                    storedImages = JsonConvert.DeserializeObject<List<LocationViewModel>>(post.Images);
                }

                LocationViewModel newImage = new() { Description = file.Name, Location = response.Data?.Location };

                if (storedImages != null)
                {
                    storedImages.Add(newImage);

                    string json = JsonConvert.SerializeObject(storedImages);

                    post!.Images = json;

                    Response<PostViewModel> postResponse = await _postService.EditPost(post);

                    if (postResponse.Success)
                    {
                        _snackbar.Add("Image uploaded successfully!", Severity.Success);
                    }
                }
            }
        }
        else
        {

        }
    }

    private void ToggleOpen(LocationViewModel image)
    {
        viewedImage = image;
        ViewingImages = !ViewingImages;
    }

    public async ValueTask DisposeAsync()
    {
        if ((_signalRService?.HubConnection?.State ?? HubConnectionState.Disconnected) == HubConnectionState.Connected && post.Id > 0)
        {
            if (_signalRService != null && _signalRService.HubConnection != null && post.Id > 0)
            {
                await _signalRService.HubConnection.SendAsync("RemoveFromGroup", $"EditPost{post.Id}");
                _signalRService.EditPostViewModel -= EditPostViewModel;
            }
        }
    }
}

