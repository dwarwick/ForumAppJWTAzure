<MudPaper Class="d-flex flex-grow-1">
    <div class="d-flex flex-grow-1 align-items-center">
        
        <AuthorizeView>
            <Authorized>
                <MudLink Href="/" Class="ms-3">Home<MudIcon Icon="@Icons.Material.Filled.Home" Class="ms-1 me-3" /></MudLink>
                <MudLink Href="forum">New Forum<MudIcon Icon="@Icons.Material.Filled.Forum" Class="ms-1 me-3" /></MudLink>
                <MudLink Href="forumlist">Forum List<MudIcon Icon="@Icons.Material.Filled.ViewList" Class="ms-1 me-3" /></MudLink>

                @if(isAdmin)
                {
                    <MudLink Href="admin/createtag">Add Tags<MudIcon Icon="@Icons.Material.Filled.ViewList" Class="ms-1 me-3" /></MudLink>
                }
            </Authorized>

            <NotAuthorized>
                <MudLink Href="/" Class="ms-3">Home<MudIcon Icon="@Icons.Material.Filled.Home" Class="ms-1 me-3" /></MudLink>
                <MudLink Href="forum" Color="Color.Error">New Forum<MudIcon Icon="@Icons.Material.Filled.Forum" Class="ms-1 me-3" /></MudLink>
                <MudLink Href="forumlist">Forum List<MudIcon Icon="@Icons.Material.Filled.ViewList" Class="ms-1 me-3" /></MudLink>
            </NotAuthorized>
        </AuthorizeView>
        <div class="ms-auto d-flex align-items-center">
            <Search />
            <MudSwitch Checked="@_darkTheme" Label="Dark Theme" CheckedChanged="@(e => UpdateTheme(e))" T="bool" />
            <LoginMenu />
        </div>
    </div>
</MudPaper>

@code {
    [Parameter] public EventCallback<bool> ThemeChanged { get; set; }
    ApplicationUserViewModel? applicationUserViewModel { get; set; }
    private IJSObjectReference? module;
    private string? _theme;
    public bool _darkTheme { get; set; }    

    bool isAdmin;



    protected override async Task OnInitializedAsync()
    {        
        _authService.UpdatedUser += (s, e) => UpdatedUser(s, e);
        _authService.UserLoggedOut += (s, e) => UserLoggedOut(s, e);

        if (await _authService.IsIauthenticated() && applicationUserViewModel == null)
        {
            Response<ApplicationUserViewModel>? response = await _authService.GetLoggedInUser();

            if (response?.Success ?? false)
            {
                applicationUserViewModel = response.Data;

                if (applicationUserViewModel != null && applicationUserViewModel.Roles != null)
                {
                    isAdmin = applicationUserViewModel.Roles.Any(x => x == "Administrator");                    
                }
            }
        }

        _theme = await _localStorage.GetItemAsStringAsync("theme");

        if (string.IsNullOrEmpty(_theme)) _theme = applicationUserViewModel?.Theme ?? "light";
        _darkTheme = _theme == "dark";

        StateHasChanged();        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _darkTheme = _theme == "dark";

        if (firstRender)
        {
            module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/app.js");
        }
    }

    private async Task UpdateTheme(bool value)
    {
        var themeName = value == true ? "dark" : "light";

        _theme = themeName;

        _darkTheme = _theme == "dark";

        if (module == null) return;

        //await module.InvokeAsync<string>("setTheme", themeName);

        await _localStorage.SetItemAsStringAsync("theme", _theme);
        await _localStorage.SetItemAsync<DateTime>("LastCheckTime", DateTime.UtcNow);

        if (applicationUserViewModel != null)
        {
            applicationUserViewModel.Theme = themeName;

            var response = await _authService.UpdateUserAsync(applicationUserViewModel);
        }

        await ThemeChanged.InvokeAsync(true);        
    }

    private void UpdatedUser(object? sender, ApplicationUserViewModel? viewModel)
    {

        applicationUserViewModel = viewModel;

        if(applicationUserViewModel != null && applicationUserViewModel.Roles != null)
        {
            isAdmin = applicationUserViewModel.Roles.Any(x => x == "Administrator");
            StateHasChanged();
        }        
    }

    private void UserLoggedOut(object? sender, bool value)
    {
        applicationUserViewModel = null;
        isAdmin = false;

        StateHasChanged();
    }
}

