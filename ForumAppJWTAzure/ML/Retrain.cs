// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace ML
{
    public partial class PredictTags
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            Console.WriteLine($"{DateTime.Now.ToLongTimeString()} Building pipeline");
            var pipeline = BuildPipeline(mlContext);


            Console.WriteLine($"{DateTime.Now.ToLongTimeString()} Training model");
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"Title", outputColumnName: @"Title")
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"Body", outputColumnName: @"Body"))
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"Title", @"Body" }))
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: @"Tags", inputColumnName: @"Tags"))
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))
                                    .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(new SdcaMaximumEntropyMulticlassTrainer.Options() { L1Regularization = 1F, L2Regularization = 0.1F, LabelColumnName = @"Tags", FeatureColumnName = @"Features" }))
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: @"PredictedLabel", inputColumnName: @"PredictedLabel"));

            return pipeline;
        }
    }
}
